{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/anastasia/src/components/Pages/ContactPage/ContactPage.tsx"],"sourcesContent":["import React from 'react'\n\nexport const ContactPage = () => {\n  return (\n    <div>ContactPage</div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAEO,MAAM,cAAc;IACzB,qBACE,8OAAC;kBAAI;;;;;;AAET"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/anastasia/src/app/%5Blocale%5D/contact/page.tsx"],"sourcesContent":["import { ContactPage } from '@/components/Pages/ContactPage/ContactPage'\nimport React from 'react'\n\nexport default function Contact() {\n  return (\n    <div>\n      <ContactPage />\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAGe,SAAS;IACtB,qBACE,8OAAC;kBACC,cAAA,8OAAC,yJAAA,CAAA,cAAW;;;;;;;;;;AAGlB"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///Users/lebiga/Desktop/ITMap/anastasia/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AA6BA,OAAO,MAAMM,eAAe;AAH5B,8BAA8B;AAzB9B,SAASN,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAEzE,cAAc;AAGd,SAASE,IAAI,EAAEC,KAAK,GAAE;IAapBM,WAAWC;AAKb,4DAA4D;;;;;;;;;;;AAC5D,OAAO,MAAMC,cAAc,IAAIX,mBAAmB,uBAAA;IAChDY,MAAAA,MAAY;QACVC,KAAAA;IAAMZ;IAAAA,MAAUa,QAAQ;gBACxBC,IAAAA;YAAAA,CAAM;YAAA;wBACNC,IAAAA;oBAAAA,KAAU;oBAAA;gCACV,IAAA;4BAAA;4BAAA,0BAA2C;iCAC3CC,YAAY;sCACZC,IAAAA,CAAAA,GAAU;gCAAA,QAAA;oCAAA,IAAA;oCAAA;iCAAA;;+BACVC,UAAU,EAAE;;qBACd;0BACAC,QAAAA,CAAU,CAAA;oBAAA;iBAAA;;iBACRC,YAAYnB;kBACd,QAAA,CAAA;gBAAA,UAAA;oBAAA,IAAA;oBAAA;iBAAA;YACF;SAAA,CAAE","ignoreList":[0]}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}