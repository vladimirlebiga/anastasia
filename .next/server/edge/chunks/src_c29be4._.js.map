{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/utils/languageNegotiator.ts"],"sourcesContent":["export type SupportedLocale = 'en' | 'nl' | 'uk' | 'ru';\n\nexport const supportedLocales: SupportedLocale[] = ['en', 'nl', 'uk', 'ru'];\n\nexport const defaultLocale: SupportedLocale = 'en';\n\nexport function getPreferredLocale(): SupportedLocale {\n  if (typeof window === 'undefined') {\n    return defaultLocale;\n  }\n\n  // Get browser's preferred languages\n  const browserLanguages = navigator.languages || [navigator.language];\n\n  // Try to find a matching supported locale\n  for (const lang of browserLanguages) {\n    const locale = lang.split('-')[0] as SupportedLocale;\n    if (supportedLocales.includes(locale)) {\n      return locale;\n    }\n  }\n\n  return defaultLocale;\n}\n\nexport function isValidLocale(locale: string): locale is SupportedLocale {\n  return supportedLocales.includes(locale as SupportedLocale);\n}\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,mBAAsC;IAAC;IAAM;IAAM;IAAM;CAAK;AAEpE,MAAM,gBAAiC;AAEvC,SAAS;IACd,wCAAmC;QACjC,OAAO;IACT;;IAEA,oCAAoC;IACpC,MAAM;IAGD,MAAM;AAQb;AAEO,SAAS,cAAc,MAAc;IAC1C,OAAO,iBAAiB,QAAQ,CAAC;AACnC"}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { supportedLocales, defaultLocale } from './utils/languageNegotiator';\n\n// Get the preferred locale from the request headers\nfunction getLocale(request: NextRequest): string {\n  const acceptLanguage = request.headers.get('accept-language');\n  if (acceptLanguage) {\n    const languages = acceptLanguage\n      .split(',')\n      .map((lang) => lang.split(';')[0].trim());\n    for (const lang of languages) {\n      const locale = lang.split('-')[0];\n      if (supportedLocales.includes(locale as any)) {\n        return locale;\n      }\n    }\n  }\n  return defaultLocale;\n}\n\nexport function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname;\n\n  // Check if the pathname is missing a locale\n  const pathnameIsMissingLocale = supportedLocales.every(\n    (locale) =>\n      !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`,\n  );\n\n  // Redirect if there is no locale\n  if (pathnameIsMissingLocale) {\n    const locale = getLocale(request);\n    return NextResponse.redirect(new URL(`/${locale}${pathname}`, request.url));\n  }\n}\n\nexport const config = {\n  matcher: [\n    // Skip all internal paths (_next)\n    '/((?!_next|.*\\\\..*).*)',\n    // Optional: only run on root (/) URL\n    // '/'\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAFA;;;AAIA,oDAAoD;AACpD,SAAS,UAAU,OAAoB;IACrC,MAAM,iBAAiB,QAAQ,OAAO,CAAC,GAAG,CAAC;IAC3C,IAAI,gBAAgB;QAClB,MAAM,YAAY,eACf,KAAK,CAAC,KACN,GAAG,CAAC,CAAC,OAAS,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;QACxC,KAAK,MAAM,QAAQ,UAAW;YAC5B,MAAM,SAAS,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE;YACjC,IAAI,kIAAA,CAAA,mBAAgB,CAAC,QAAQ,CAAC,SAAgB;gBAC5C,OAAO;YACT;QACF;IACF;IACA,OAAO,kIAAA,CAAA,gBAAa;AACtB;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IAEzC,4CAA4C;IAC5C,MAAM,0BAA0B,kIAAA,CAAA,mBAAgB,CAAC,KAAK,CACpD,CAAC,SACC,CAAC,SAAS,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,KAAK,aAAa,CAAC,CAAC,EAAE,QAAQ;IAGpE,iCAAiC;IACjC,IAAI,yBAAyB;QAC3B,MAAM,SAAS,UAAU;QACzB,OAAO,iKAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE,QAAQ,GAAG;IAC3E;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP,kCAAkC;QAClC;KAGD;AACH"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}